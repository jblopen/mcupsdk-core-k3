%%{
    let filex_module = system.modules['/fs/filex/filex'];
    let flash_module = system.modules['/board/flash/flash'];
    let mmcsd_instances = _.filter(filex_module.$instances, function (inst) { return (inst.media == "SD" || inst.media == "EMMC");});
    let ramdisk_instances = _.filter(filex_module.$instances, function (inst) { return (inst.media == "RAMDISK");})
    let flash_instances = _.filter(filex_module.$instances, function (inst) { return (inst.media == "SERIAL_FLASH");})

    let nor_instances = _.filter(flash_instances, function (inst) { return (!inst.peripheralDriver.serialFlashDriver.hasOwnProperty('flashType') || 
                                                                             inst.peripheralDriver.serialFlashDriver.flashType == "SERIAL_NOR"); })
    let nand_instances = _.filter(flash_instances, function (inst) { return (inst.peripheralDriver.serialFlashDriver.hasOwnProperty('flashType') &&
                                                                             inst.peripheralDriver.serialFlashDriver.flashType == "SERIAL_NAND"); })
%%}
/*
 * FileX
 */


/* FileX Instance Macros */
% for(let k = 0; k < filex_module.$instances.length; k++) {
    % let instance = filex_module.$instances[k];
#define `instance.$name.toUpperCase()`               (`k`U)
% }
#define FILEX_NUM_INSTANCES (`filex_module.$instances.length`U)
#define FILEX_NOR_NUM_INSTANCES  (`nor_instances.length`U)
#define FILEX_NAND_NUM_INSTANCES   (`nand_instances.length`U)
#define FILEX_RAMDISK_NUM_INSTANCES  (`ramdisk_instances.length`U)
#define FILEX_MMCSD_NUM_INSTANCES    (`mmcsd_instances.length`U)
